package com.online_Pack;

import java.io.File;
import java.io.FileReader;
import java.util.Properties;


import org.apache.log4j.Logger;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.config.baseclass;
import com.voda.PayBill.VodaPay_BillStepDef;
import com.voda.PayBill.VodafBillPayObj;

import HTML_REPORTS.HTMLReportGenerator;
import HTML_REPORTS.TakeScreenShot;
import cucumber.api.PendingException;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class VF_Pack_StepDef {

	
	Properties prop = new Properties();

	public Properties OR;

	public File file = null;

	public FileReader filereader;

	WebDriver driver;
	public static int number = 1;

	static int count = 1;
	final static Logger log = Logger.getLogger(VodaPay_BillStepDef.class);



@Given("^Launch the browser$")
public void launch_the_browser() throws Throwable {
	String path = System.getProperty("user.dir") + "\\Driver\\geckodriver.exe";
	System.setProperty("webdriver.gecko.driver", path);
	
		FirefoxProfile profile = new FirefoxProfile();

	//	profile.setPreference("network.proxy.type", ProxyType.AUTODETECT.ordinal());

		FirefoxOptions options = new FirefoxOptions();

		options.setProfile(profile);

		driver = new FirefoxDriver(options);

		System.out.println(" browser");

	System.out.println(" browser");

	
	OR = new Properties();

	file = new File(System.getProperty("user.dir") + "/src/test/java/com/Testdata/URL.properties");

	filereader = new FileReader(file);

	OR.load(filereader);

	driver.get(OR.getProperty("VodaFone_Pack"));

	System.out.println(" Browser Firefox is opening ");

	System.out.println("VodaFone Pay Bill page opened");
	
	Thread.sleep(5000);
	
	HTMLReportGenerator.StepDetails("Pass", (count++) + "- Enter VodaFone prepaid Pack URL", "",

			TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	
	driver.manage().deleteAllCookies();
	
}

@When("^Enter URL$")
public void enter_URL() throws Throwable {
	
	
	
	System.out.println("===============");

	
	
}

@Then("^Prepaid Pack page should open properly$")
public void prepaid_Pack_page_should_open_properly() throws Throwable {
	
	System.out.println("======");
	HTMLReportGenerator.StepDetails("Pass", (count++) + "- VodaFone prepaid Pack page opened", "",

			TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
}

@Then("^Verify Page >> Circle should display$")
public void verify_Page_Circle_should_display() throws Throwable {
    VF_Pack_Object obj=new VF_Pack_Object(driver);
    
    boolean b1=obj.Circle.isDisplayed();
    
    if(b1==true)
    {
    	System.out.println("Circle is displayed");
    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Circle is displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    }
    else
    {
    	System.out.println("Circle is not displayed");
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Circle is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
    }
}

@Then("^Verify Page >> By default Mumbai circle should display$")
public void verify_Page_By_default_Mumbai_circle_should_display() throws Throwable {
    VF_Pack_Object obj=new VF_Pack_Object(driver);
    
    String s1=obj.Circle.getText();
    
    System.out.println(s1);
    
    String s2="MUMBAI.";
    
    if(s1.equalsIgnoreCase(s2))
    {
    	System.out.println("default Mumbai circle is display");
    	HTMLReportGenerator.StepDetails("Pass", (count++)+"default Mumbai circle is displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

    }
    else
    {
    	System.out.println("default Mumbai circle is not display");
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"default Mumbai circle is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	
    }
}

@Then("^Verify Page >> Pack categories should display$")
public void verify_Page_Pack_categories_should_display() throws Throwable {
    VF_Pack_Object obj=new VF_Pack_Object(driver);
    WebDriverWait wait=new WebDriverWait(driver, 30);
    try {
    	
    	wait.until(ExpectedConditions.visibilityOfAllElements(obj.packs_categories));
    boolean b1=obj.packs_categories.isDisplayed();
    if(b1==true)
    {
    	System.out.println("Pack categories is displayed");
    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Pack categories is displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    }
    else
    {
    	System.out.println("Pack categories is not displayed");
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Pack categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
    }
    }catch (Exception e) {
    	System.out.println("Pack categories is not displayed"+e);
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Pack categories is not displayed"+e, "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
	}
    
    
}

@Then("^Verify Pack categories >> Unlimited, Talktime, Internet should display$")
public void verify_Pack_categories_Unlimited_Talktime_Internet_should_display() throws Throwable {
	VF_Pack_Object obj=new VF_Pack_Object(driver);
	 WebDriverWait wait=new WebDriverWait(driver, 30);
	    try {
	    	
	    	wait.until(ExpectedConditions.visibilityOfAllElements(obj.unlimited_categories));
	    	boolean b1=obj.unlimited_categories.isDisplayed();
	    if(b1==true)
	    {
	    	System.out.println("Unlimited categories is displayed");
	    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Unlimited categories is displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    }
	    else
	    {
	    	System.out.println("Unlimited categories is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Unlimited categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
	    }
	    }catch (Exception e) {
	    	System.out.println("Unlimited categories is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Unlimited categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
		}
	    try {
	    boolean b2=obj.talktime_categories.isDisplayed();
	    if(b2==true)
	    {
	    	System.out.println("Talktime categories is displayed");
	    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Talktime categories is displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    }
	    else
	    {
	    	System.out.println("Talktime categories is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Talktime categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
	    }
	    }catch (Exception e) {
	    	System.out.println("Talktime categories is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Talktime categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
		}
	    try {
	    boolean b3=obj.internet_categories.isDisplayed();
	    if(b3==true)
	    {
	    	System.out.println("Internet categories is displayed");
	    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Internet categories is displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    }
	    else
	    {
	    	System.out.println("Internet categories is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Internet categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
	    }
	    }catch (Exception e) {
	    	System.out.println("Internet categories is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Internet categories is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
		}
}

@Then("^Verify Pack details >> Pack Mrp should display$")
public void verify_Pack_details_Pack_Mrp_should_display() throws Throwable {
	VF_Pack_Object obj=new VF_Pack_Object(driver); 
	try {
	boolean b1=obj.pack_amount.isDisplayed();
	
	String s1=obj.pack_amount.getText();
	    if(b1==true)
	    {
	    	System.out.println("Pack Mrp is displayed"+s1);
	    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Pack Mrp is displayed MRP="+s1, "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    }
	    else
	    {
	    	System.out.println("Pack Mrp is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Pack Mrp is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
	    }
	}catch (Exception e) {
		System.out.println("Pack mrp is not displayed"+e);
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Pack is not displayed"+e, "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
	}
}

@Then("^Verify Pack details >> Validity should display$")
public void verify_Pack_details_Validity_should_display() throws Throwable {
VF_Pack_Object obj=new VF_Pack_Object(driver); 
	try {
	boolean b1=obj.pack_validity.isDisplayed();
	
	
	    if(b1==true)
	    {
	    	System.out.println("Validity is displayed");
	    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Validity is displayed ", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    }
	    else
	    {
	    	System.out.println("Validity is not displayed");
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Validity is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
	    }
	}catch (Exception e) {
			System.out.println("Pack mrp is not displayed"+e);
	    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Pack is not displayed"+e, "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	    
		}
}

@Then("^If Talktime details available >> It should display for Unlimited category pack$")
public void if_Talktime_details_available_It_should_display_for_Unlimited_category_pack() throws Throwable {
	VF_Pack_Object obj=new VF_Pack_Object(driver); 

	try {
	boolean b1=obj.pack_talktime.isDisplayed();
	
	
    if(b1==true)
    {
    	System.out.println("Talktime is displayed");
    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Talktime is displayed ", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    }
    else
    {
    	System.out.println("Talktime is not displayed");
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Talktime is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
    }
	}catch (Exception e) {
		System.out.println("Talktime is not displayed"+e);
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Talktime is not displayed"+e, "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
	}
}

@Then("^If Data details available >> It should display for Unlimited category pack$")
public void if_Data_details_available_It_should_display_for_Unlimited_category_pack() throws Throwable {

	VF_Pack_Object obj=new VF_Pack_Object(driver); 
try {
	
	boolean b1=obj.pack_data.isDisplayed();
	
	
    if(b1==true)
    {
    	System.out.println("Data is displayed");
    	HTMLReportGenerator.StepDetails("Pass", (count++)+"Data is displayed ", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    }
    else
    {
    	System.out.println("Data is not displayed");
    	HTMLReportGenerator.StepDetails("Fail", (count++)+"Data is not displayed", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
    }
}catch (Exception e) {
	System.out.println("Data is not displayed"+e);
	HTMLReportGenerator.StepDetails("Fail", (count++)+"Data is not displayed"+e, "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

}
}

@Then("^SMS Details should not display in pack details section$")
public void sms_Details_should_not_display_in_pack_details_section() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^If Nontelco benefits are available then max two should display in pack details section$")
public void if_Nontelco_benefits_are_available_then_max_two_should_display_in_pack_details_section() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Select Internet category >> Only Data and Validity fields should display$")
public void select_Internet_category_Only_Data_and_Validity_fields_should_display() throws Throwable {
    VF_Pack_Object obj=new VF_Pack_Object(driver);
    
    obj.internet_categories.click();
    Thread.sleep(1000);
	HTMLReportGenerator.StepDetails("Pass", (count++)+":-Select Internet category", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

}

@Then("^Select Talktime category >> Only Talktime and Validity fields should display$")
public void select_Talktime_category_Only_Talktime_and_Validity_fields_should_display() throws Throwable {
	 VF_Pack_Object obj=new VF_Pack_Object(driver);
	    
	    obj.talktime_categories.click();
	    Thread.sleep(1000);
		HTMLReportGenerator.StepDetails("Pass", (count++)+":-Select Talktime category", "", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

}

@Then("^On page load >> Imortant Things to Know should display collapsed$")
public void on_page_load_Imortant_Things_to_Know_should_display_collapsed() throws Throwable {
	Thread.sleep(3000);

	JavascriptExecutor jse = (JavascriptExecutor) driver;

	jse.executeScript("window.scrollBy(0,350)", "");

	VodafBillPayObj vdabillPay = new VodafBillPayObj(driver);

	WebDriverWait wait = new WebDriverWait(driver, 05);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vdabillPay.ImpThinstono));

		boolean b = vdabillPay.ImpThinstono.isDisplayed();

		if (b == true) {

			System.out.println("On page load >> Imortant Things to Know should display collapsed");

			Thread.sleep(2000);

			HTMLReportGenerator.StepDetails("Pass",
					(count++) + "- On page load >> Imortant Things to Know should display collapsed", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

		} else {

			System.out.println("On page load >> Imortant Things to Know should not display collapsed");

			HTMLReportGenerator.StepDetails("Fail",
					(count++) + "- On page load >> Imortant Things to Know should not display collapsed", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}

	} catch (Exception ex)  {

		System.out.println("Locator not found issue--R");

		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue" + ex, "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	}
}

@Then("^Click Arrow for Important Things to Know >> Page should autoscroll$")
public void click_Arrow_for_Important_Things_to_Know_Page_should_autoscroll() throws Throwable {
	VodafBillPayObj vdabillPay = new VodafBillPayObj(driver);

	WebDriverWait wait = new WebDriverWait(driver, 05);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vdabillPay.ImpThinstono));

		vdabillPay.ImpThinstono.click();

		System.out.println("Click Arrow for Important Things to Know >> Page should autoscroll");

		HTMLReportGenerator.StepDetails("Pass",
				(count++) + "- Click Arrow for Important Things to Know >> Page should autoscroll", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

	} catch (TimeoutException ex) {
		System.out.println("Locator not found issue--G");

		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue--G" + ex, "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	} 
}

@Then("^Verify page >> Focus should go on Imp Things to know section$")
public void verify_page_Focus_should_go_on_Imp_Things_to_know_section() throws Throwable {
	driver.navigate().refresh();

	Thread.sleep(2000);

	JavascriptExecutor jse = (JavascriptExecutor) driver;

	jse.executeScript("window.scrollBy(0,450)", "");

	System.out.println("Verify page >> Focus should go on Imp Things to know section");
}

@Then("^Verify page >> Imp Things to Know section should expand$")
public void verify_page_Imp_Things_to_Know_section_should_expand() throws Throwable {
	VodafBillPayObj vdabillPay = new VodafBillPayObj(driver);

	WebDriverWait wait = new WebDriverWait(driver, 30);

	// try{

	wait.until(ExpectedConditions.visibilityOfAllElements(vdabillPay.ImpThingArrow));

	vdabillPay.ImpThingArrow.click();

	System.out.println("Verify page >> Imp Things to Know section should expand");

   
}

@Then("^Click Arrow for Important Things to Know >> Page should collapse$")
public void click_Arrow_for_Important_Things_to_Know_Page_should_collapse() throws Throwable {
	VodafBillPayObj vdabillPay = new VodafBillPayObj(driver);

	WebDriverWait wait = new WebDriverWait(driver, 30);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vdabillPay.ImpThinstoNow));

		vdabillPay.ImpThinstoNow.click();

		System.out.println("Click Arrow for Important Things to Know >> Page should collapse");

		HTMLReportGenerator.StepDetails("Pass",
				(count++) + "- Click Arrow for Important Things to Know >> Page should collapse", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

	} catch (TimeoutException ex) {

		System.out.println("Locator not found issue--#");
		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue--#", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	}
	
	/*VodafBillPayObj vdabillPay1 = new VodafBillPayObj(driver);

	WebDriverWait wait1 = new WebDriverWait(driver, 50);

		wait1.until(ExpectedConditions.visibilityOfAllElements(vdabillPay1.impcllapse));

		vdabillPay1.impcllapse.click();
		
		System.out.println("collapse page ");*/


}

@Then("^If Pack count is five or less than five >> Load More link should not display$")
public void if_Pack_count_is_five_or_less_than_five_Load_More_link_should_not_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^If pack count is more than five >> Load More link should display$")
public void if_pack_count_is_more_than_five_Load_More_link_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Load More >> Verify packs >>All available packs should display$")
public void click_Load_More_Verify_packs_All_available_packs_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Load More >> Verify page >> Load More link should not display$")
public void click_Load_More_Verify_page_Load_More_link_should_not_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Know More for any pack >> Popup should open$")
public void click_Know_More_for_any_pack_Popup_should_open() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Esc >> Popup should close$")
public void click_Esc_Popup_should_close() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Cross on popup >> Popup should close$")
public void click_Cross_on_popup_Popup_should_close() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Know More details >> Pack Mrp should display$")
public void verify_Know_More_details_Pack_Mrp_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Know More details >> Below Mrp -  Data and SMS details should display$")
public void verify_Know_More_details_Below_Mrp_Data_and_SMS_details_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Know More details >> If non telco benefits are available then all benefits should display$")
public void verify_Know_More_details_If_non_telco_benefits_are_available_then_all_benefits_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Know More details >> If non telco benefits are Not available then benefits should Not display$")
public void verify_Know_More_details_If_non_telco_benefits_are_Not_available_then_benefits_should_Not_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Know More details >> Buy Pack should display$")
public void verify_Know_More_details_Buy_Pack_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Buy Pack >> Seleced Pack page should display$")
public void click_Buy_Pack_Seleced_Pack_page_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Selected Pack page >> Edit should display next to Selected Pack$")
public void verify_Selected_Pack_page_Edit_should_display_next_to_Selected_Pack() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Selected Pack page >> Pack Mrp displayed on landing page for respective Pack should display$")
public void verify_Selected_Pack_page_Pack_Mrp_displayed_on_landing_page_for_respective_Pack_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Selected Pack page >> Below Mobile Number Details section should display$")
public void verify_Selected_Pack_page_Below_Mobile_Number_Details_section_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Mobile Number details section >> Focus should be on Mobile Number field$")
public void verify_Mobile_Number_details_section_Focus_should_be_on_Mobile_Number_field() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Mobile Number details section >> Confirm should be disabled$")
public void verify_Mobile_Number_details_section_Confirm_should_be_disabled() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify Page >> Imp Things to Know Section should display$")
public void verify_Page_Imp_Things_to_Know_Section_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter mobile number less than ten digits - Error message should display in Red$")
public void enter_mobile_number_less_than_ten_digits_Error_message_should_display_in_Red() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter mobile number less than ten digits - Enter Mobile Number label and field border should display in Red$")
public void enter_mobile_number_less_than_ten_digits_Enter_Mobile_Number_label_and_field_border_should_display_in_Red() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter NonIdea/NonVF number- Toast Message should display$")
public void enter_NonIdea_NonVF_number_Toast_Message_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Dismiss >> Toast message should vanish$")
public void click_Dismiss_Toast_message_should_vanish() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter Prepaid Number of Idea - Toast Message should display$")
public void enter_Prepaid_Number_of_Idea_Toast_Message_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter Postpaid Number of Idea - Toast Message should display$")
public void enter_Postpaid_Number_of_Idea_Toast_Message_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Try to enter Mobile Number starting with (\\d+) to (\\d+) >> It should not allow$")
public void try_to_enter_Mobile_Number_starting_with_to_It_should_not_allow(int arg1, int arg2) throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter alphabets/Special characters in Mobile Number field- it should not allow$")
public void enter_alphabets_Special_characters_in_Mobile_Number_field_it_should_not_allow() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Select Circle >> DL - DL circle packs should display$")
public void select_Circle_DL_DL_circle_packs_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^For DL circle >> Select Talktime >> Click Buy Pack for Rs (\\d+) pack$")
public void for_DL_circle_Select_Talktime_Click_Buy_Pack_for_Rs_pack(int arg1) throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Enter MH circleVF  number >> Confirm should be enabled as Rs (\\d+) pack is available for MH circle$")
public void enter_MH_circleVF_number_Confirm_should_be_enabled_as_Rs_pack_is_available_for_MH_circle(int arg1) throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Edit >> Click Buy Pack for Rs (\\d+) Pack$")
public void click_Edit_Click_Buy_Pack_for_Rs_Pack(int arg1) throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Buy Pack >> Enter MH circle VF number >> Error message should display in Red$")
public void click_Buy_Pack_Enter_MH_circle_VF_number_Error_message_should_display_in_Red() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Buy Pack >> Enter MH circle VF number >> Enter Mobile Number label and field border should display in Red$")
public void click_Buy_Pack_Enter_MH_circle_VF_number_Enter_Mobile_Number_label_and_field_border_should_display_in_Red() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^For DL circle >> Enter DL Circle VF number >> Confirm should be enabled$")
public void for_DL_circle_Enter_DL_Circle_VF_number_Confirm_should_be_enabled() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Confirm >> VF Payment Gateway should display$")
public void click_Confirm_VF_Payment_Gateway_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Cancel >> VF oops page should display$")
public void click_Cancel_VF_oops_page_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify OOPs page >> Mobile number should display$")
public void verify_OOPs_page_Mobile_number_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify OOPs page >> Payment Amount as Pack Mrp should display$")
public void verify_OOPs_page_Payment_Amount_as_Pack_Mrp_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Verify OOPs page >> Trasaction Id should display$")
public void verify_OOPs_page_Trasaction_Id_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}

@Then("^Click Try Again >> VF Payment Gateway page should display$")
public void click_Try_Again_VF_Payment_Gateway_page_should_display() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    throw new PendingException();
}
	
	
}

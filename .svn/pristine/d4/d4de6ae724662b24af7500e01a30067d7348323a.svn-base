package com.vodafone.home.page;

import java.io.File;
import java.io.FileReader;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.config.baseclass;
import com.voda.PayBill.VodaPay_BillStepDef;

import HTML_REPORTS.HTMLReportGenerator;
import HTML_REPORTS.TakeScreenShot;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;

public class VodafoneHomePageStep {
	Properties prop = new Properties();
	public Properties OR;
	public File file = null;
	public FileReader filereader;
	WebDriver driver;
	public static int number = 1;

	static int count = 1;
	final static Logger log = Logger.getLogger(VodaPay_BillStepDef.class);
	
	@Given("^Load Vodafone Site >> Home Page should display$")
	public void load_Vodafone_Site_Home_Page_should_display() throws Throwable {
		
		// Chrome
				String path = System.getProperty("user.dir") + "\\Driver\\chromedriver.exe";
				System.setProperty("webdriver.chrome.driver", path);
			
				driver = new ChromeDriver();
				System.out.println(" browser");

				OR = new Properties();

				file = new File(System.getProperty("user.dir") + "/src/test/java/com/Testdata/URL.properties");

				filereader = new FileReader(file);

				OR.load(filereader);

				driver.get(OR.getProperty("Vodafone_HomePage"));

				System.out.println(" Chrome Browser is opening ");

				System.out.println("VodaFone Home page opened");
				
				driver.manage().window().maximize();

				Thread.sleep(5000);

				HTMLReportGenerator.StepDetails("Pass", (count++) + "- VodaFone Pay Bill page opened", "",

						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	}

	@Then("^Verify Home Page >> Header should display$")
	public void verify_Home_Page_Header_should_display() throws Throwable {
	
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		WebDriverWait wait = new WebDriverWait(driver, 30);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Home_pageHeder));
		
		boolean b = vodahome.Home_pageHeder.isDisplayed();
		
		if(b == true) {
			
			System.out.println("Verify Home Page >> Header should display");
			
			
			HTMLReportGenerator.StepDetails("Pass", (count++) + "- Verify Home Page >> Header should display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
			System.out.println("Verify Home Page >> Header should not display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Verify Home Page >> Header should not display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}
	}catch(TimeoutException ex) {
	
		System.out.println("Locator not found issue");
		
		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	  }
	}

	@Then("^Verify Home Page >> Footer should display$")
	public void verify_Home_Page_Footer_should_display() throws Throwable {
		
        Thread.sleep(2000);
		
		JavascriptExecutor jse = (JavascriptExecutor) driver;

		jse.executeScript("window.scrollBy(0,5000)", "");
		
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		WebDriverWait wait = new WebDriverWait(driver, 30);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Home_footerHeder));
		
		boolean b = vodahome.Home_footerHeder.isDisplayed();
		
		if(b == true) {
			
			System.out.println("Verify Home Page >> Footer should display");
			
			HTMLReportGenerator.StepDetails("Pass", (count++) + "- Verify Home Page >> Footer should display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
			System.out.println("Verify Home Page >> Footer should not display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Verify Home Page >> Footer should not display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}
	}catch(TimeoutException ex) {
	
		System.out.println("Locator not found issue");
		
		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	  }
	   
	}

	@Then("^Verify Home Page >> Below Header -  Banner should display$")
	public void verify_Home_Page_Below_Header_Banner_should_display() throws Throwable {
		
        Thread.sleep(2000);
		
		JavascriptExecutor jse = (JavascriptExecutor) driver;

		jse.executeScript("window.scrollBy(0,-3500)", "");
		
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		WebDriverWait wait = new WebDriverWait(driver, 30);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Home_pageHeder));
		
		boolean b = vodahome.Home_pageHeder.isDisplayed();
		
		if(b == true) {
			
			System.out.println("Verify Home Page >> Below Header -  Banner should display");
			
			HTMLReportGenerator.StepDetails("Pass", (count++) + "- Verify Home Page >> Below Header -  Banner should display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
			System.out.println("Verify Home Page >> Below Header -  Banner should not display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Verify Home Page >> Below Header -  Banner should not display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}
	}catch(TimeoutException ex) {
	
		System.out.println("Locator not found issue");
		
		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	  }
	   
	}

	@Then("^Verify Home Page >> Mobile number field should display$")
	public void verify_Home_Page_Mobile_number_field_should_display() throws Throwable {
		
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		WebDriverWait wait = new WebDriverWait(driver, 30);

	try {

		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));
		
		boolean b = vodahome.mobile_No.isDisplayed();
		
		if(b == true) {
			
			System.out.println("Verify Home Page >> Mobile number field should display");
			
			HTMLReportGenerator.StepDetails("Pass", (count++) + "- Verify Home Page >> Mobile number field should display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
			System.out.println("Verify Home Page >> Mobile number field should not display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Verify Home Page >> Mobile number field should not display", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}
	}catch(TimeoutException ex) {
	
		System.out.println("Locator not found issue");
		
		HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",

				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	  }
	   
	}

	@Then("^Verify Home Page >> Arrow \\(>\\) button should be disabled as number is not provided$")
	public void verify_Home_Page_Arrow_button_should_be_disabled_as_number_is_not_provided() throws Throwable {
		
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 30);

		try {

			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.arrow_key));
			
			boolean b = vodahome.arrow_key.isEnabled();
			
			if(b == true) {
				
				System.out.println("Verify Home Page >> Arrow (>) button should be disabled as number is not provided");
				
				HTMLReportGenerator.StepDetails("Pass", (count++) + "- Verify Home Page >> Arrow (>) button should be disabled as number is not provided", "",

						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}else {
				
				System.out.println("Verify Home Page >> Arrow (>) button should be disabled as number is provided");
				
				HTMLReportGenerator.StepDetails("Fail", (count++) + "- Verify Home Page >> Arrow (>) button should be disabled as number is provided", "",

						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}
		}catch(TimeoutException ex) {
		
			System.out.println("Locator not found issue");
			
			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",

					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		  }
		   
	}

	@Then("^Enter mobile number less than ten digits - Error message should display in Red$")
	public void enter_mobile_number_less_than_ten_digits_Error_message_should_display_in_Red() throws Throwable {
		
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		WebDriverWait wait = new WebDriverWait(driver, 50);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("LessThan"));

			vodahome.mobile_No.sendKeys(Keys.BACK_SPACE);

			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.error_msg));

			String error_msg = "Please enter 10 digit mobile number";

			String error_msg1 = vodahome.error_msg.getText();

			System.out.println("===" + error_msg1);

			String color = vodahome.error_msg.getCssValue("color");

			String color1 = "rgba(230, 0, 0, 1)";

			System.out.println("============" + color);

			boolean n1 = vodahome.error_msg.isDisplayed();

			if (n1 == true) {

				System.out.println("Error msg is displyed");

				if (error_msg1.equalsIgnoreCase(error_msg) && color.equalsIgnoreCase(color1)) {

					System.out.println("Correct Error msg is displyed in correct color");

					HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Correct Error msg is displyed in correct color", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				} else {
					
					System.out.println("Incorrect Error msg is displyed in correct color");
					HTMLReportGenerator.StepDetails("Fail",
							(count++) + "- Correct Error msg is displyed in correct color", "",
							TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				}
				
			} else {

				HTMLReportGenerator.StepDetails("Fail", (count++) + "- Correct Error msg is displyed in correct color",
						"", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				System.out.println("Error msg is not displayed");
			}

		} catch (TimeoutException ex) {

			System.out.println("Locator not found issue");

			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
	    
	}

	@Then("^Enter mobile number less than ten digits - Enter Mobile Number label and field border should display in Red$")
	public void enter_mobile_number_less_than_ten_digits_Enter_Mobile_Number_label_and_field_border_should_display_in_Red() throws Throwable {
   
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("LessThan"));

			vodahome.mobile_No.sendKeys(Keys.BACK_SPACE);

			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.error_msg));

			String error_msg = "Please enter 10 digit mobile number";

			String error_msg1 = vodahome.error_msg.getText();

			System.out.println("===" + error_msg1);

			String color = vodahome.error_msg.getCssValue("color");

			String color1 = "rgba(230, 0, 0, 1)";

			System.out.println("============" + color);

			boolean n1 = vodahome.error_msg.isDisplayed();

			if (n1 == true) {

				System.out.println("Error msg is displyed");

				if (error_msg1.equalsIgnoreCase(error_msg) && color.equalsIgnoreCase(color1)) {

					System.out.println("Correct boder color is displyed in correct color");

					HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Correct boder color is displyed in correct color", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				} else {
					
					System.out.println("Incorect boder color display");
					HTMLReportGenerator.StepDetails("Fail",
							(count++) + "- Correct Error msg is displyed in correct color", "",
							TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				}
				
			} else {

				HTMLReportGenerator.StepDetails("Fail", (count++) + "- Correct Error msg is displyed in correct color",
						"", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				System.out.println("Error msg is not displayed");
			}

		} catch (TimeoutException ex) {

			System.out.println("Locator not found issue");

			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
	}

	@Then("^Enter Postpaid Number of Idea - error Message should display in red color$")
	public void enter_Postpaid_Number_of_Idea_error_Message_should_display_in_red_color() throws Throwable {
	
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("prepaidIdeaNO"));
			
			System.out.println("Enter Postpaid Number of Idea ");
			
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.error_msg));

			String error_msg = "You have entered Non-Vodafone Number. Please enter valid Vodafone number";

			String error_msg1 = vodahome.error_msg.getText();

			System.out.println("===" + error_msg1);

			String color = vodahome.error_msg.getCssValue("color");

			String color1 = "rgba(230, 0, 0, 1)";

			System.out.println("============" + color);

			boolean n1 = vodahome.error_msg.isDisplayed();

			if (n1 == true) {

				System.out.println("Error msg is displyed");

				if (error_msg1.equalsIgnoreCase(error_msg) && color.equalsIgnoreCase(color1)) {

					System.out.println("Correct boder color is displyed in correct color");

					HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Correct boder color is displyed in correct color", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				} else {
					
					System.out.println("Incorect boder color display");
					HTMLReportGenerator.StepDetails("Fail",
							(count++) + "- Correct Error msg is displyed in correct color", "",
							TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				}
				
			} else {

				HTMLReportGenerator.StepDetails("Fail", (count++) + "- Correct Error msg is displyed in correct color",
						"", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				System.out.println("Error msg is not displayed");
			}

		} catch (TimeoutException ex) {

			System.out.println("Locator not found issue-^");

			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue-^", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
	}
	/*@Then("^Click Dismiss >> Toast message should vanish$")
	public void click_Dismiss_Toast_message_should_vanish() throws Throwable {
		
	   VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
	   
	   WebDriverWait wait = new WebDriverWait(driver, 50);
	  	
		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.tost_dissmis));

		vodahome.tost_dissmis.click();
				
		System.out.println("Click Dismiss >> Toast message should vanish");
		
		HTMLReportGenerator.StepDetails("Pass", (count++)

				+ "- Click Dismiss >> Toast message should vanish", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    
	   }*/


	@Then("^Enter NonIdea/NonVF number- error Message should display in red color$")
	public void enter_NonIdea_NonVF_number_error_Message_should_display_in_red_color() throws Throwable {
	    
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("NonIdeaNo"));
			
			System.out.println("Enter Postpaid Number of Idea ");
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.error_msg));

			String error_msg = "You have entered Non-Vodafone Number. Please enter valid Vodafone number";

			String error_msg1 = vodahome.error_msg.getText();

			System.out.println("===" + error_msg1);

			String color = vodahome.error_msg.getCssValue("color");

			String color1 = "rgba(230, 0, 0, 1)";

			System.out.println("============" + color);

			boolean n1 = vodahome.error_msg.isDisplayed();

			if (n1 == true) {

				System.out.println("Error msg is displyed");

				if (error_msg1.equalsIgnoreCase(error_msg) && color.equalsIgnoreCase(color1)) {

					System.out.println("Correct boder color is displyed in correct color");

					HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Correct boder color is displyed in correct color", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				} else {
					
					System.out.println("Incorect boder color display");
					HTMLReportGenerator.StepDetails("Fail",
							(count++) + "- Correct Error msg is displyed in correct color", "",
							TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				}
				
			} else {

				HTMLReportGenerator.StepDetails("Fail", (count++) + "- Correct Error msg is displyed in correct color",
						"", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

				System.out.println("Error msg is not displayed");
			}

		} catch (TimeoutException ex) {

			System.out.println("Locator not found issue");

			HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
	}

	@Then("^Try to enter Mobile Number starting with (\\d+) to (\\d+) >> It should not allow$")
	public void try_to_enter_Mobile_Number_starting_with_to_It_should_not_allow(int arg1, int arg2) throws Throwable {
		
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		 
		 vodahome.mobile_No.clear();

			WebDriverWait wait = new WebDriverWait(driver, 40);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("NuStartinZero"));

			String typedValue1 = vodahome.mobile_No.getAttribute("value");

			int size1 = typedValue1.length();

			if (size1 == 0) {

			System.out.println("Try to enter Mobile Number starting with 0 to 4 >> It should not allow");

			HTMLReportGenerator.StepDetails("Pass",
			(count++) + "Try to enter Mobile Number starting with 0 to 4 >> It should not allow", "",
			TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				}
			} catch (TimeoutException ex) {

				System.out.println("Try to enter Mobile Number starting with 0 to 4 >> It should allow");

				HTMLReportGenerator.StepDetails("Fail",
						(count++) + "Try to enter Mobile Number starting with 0 to 4 >> It should allow" + ex, "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

			}
	}

	@Then("^Enter alphabets/Special characters in Mobile Number field- it should not allow$")
	public void enter_alphabets_Special_characters_in_Mobile_Number_field_it_should_not_allow() throws Throwable {
		
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		 
		 vodahome.mobile_No.clear();
	   
		WebDriverWait wait = new WebDriverWait(driver, 30);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("AlfabetSpecial"));

			System.out.println("Enter alphabets/Special characters in Mobile Number field- it should not allow");

			String typedValue1 = vodahome.mobile_No.getAttribute("value");

			int size1 = typedValue1.length();

			if (size1 == 0) {

				System.out.println("Enter alphabets/Special characters in Mobile Number field- it should not allow");

				HTMLReportGenerator.StepDetails("Pass",
						(count++) + "-Enter alphabets/Special characters in Mobile Number field- it should not allow",
						"", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
		} catch (TimeoutException ex) {

			System.out.println("Enter alphabets/Special characters in Mobile Number field- it should allow");

			HTMLReportGenerator.StepDetails("Fail",
					(count++) + "Enter alphabets/Special characters in Mobile Number field- it should allow" + ex, "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

			Thread.sleep(7000);
		}
	}

	@Then("^Enter Idea Prepaid Number >> error Message should display red color$")
	public void enter_Idea_Prepaid_Number_error_Message_should_display_red_color() throws Throwable {
	 
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			vodahome.mobile_No.clear();

			WebDriverWait wait = new WebDriverWait(driver, 50);

			try {
				wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

				vodahome.mobile_No.sendKeys(OR.getProperty("prepaidIdeaNO"));
				
				System.out.println("Enter Idea Prepaid Number >> Toast Message should display");
				
				wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.error_msg));

				String error_msg = "You have entered Non-Vodafone Number. Please enter valid Vodafone number";

				String error_msg1 = vodahome.error_msg.getText();

				System.out.println("===" + error_msg1);

				String color = vodahome.error_msg.getCssValue("color");

				String color1 = "rgba(230, 0, 0, 1)";

				System.out.println("============" + color);

				boolean n1 = vodahome.error_msg.isDisplayed();

				if (n1 == true) {

					System.out.println("Error msg is displyed");

					if (error_msg1.equalsIgnoreCase(error_msg) && color.equalsIgnoreCase(color1)) {

						System.out.println("Correct boder color is displyed in correct color");

						HTMLReportGenerator.StepDetails("Pass", (count++)

						+ "- Correct boder color is displyed in correct color", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

					} else {
						
						System.out.println("Incorect boder color display");
						HTMLReportGenerator.StepDetails("Fail",
								(count++) + "- Correct Error msg is displyed in correct color", "",
								TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
					}
					
				} else {

					HTMLReportGenerator.StepDetails("Fail", (count++) + "- Correct Error msg is displyed in correct color",
							"", TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));

					System.out.println("Error msg is not displayed");
				}

			} catch (TimeoutException ex) {

				System.out.println("Locator not found issue");

				HTMLReportGenerator.StepDetails("Fail", (count++) + "- Locator not found issue", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
	}

	/*@Then("^Enter COCP number >> Toast message should display$")
	public void enter_COCP_number_Toast_message_should_display() throws Throwable {
		
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		   
	    WebDriverWait wait = new WebDriverWait(driver, 50);
		  	
		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.tost_dissmis));

		vodahome.tost_dissmis.click();
					
		System.out.println("Click Dismiss >> Toast message should vanish");
			
		HTMLReportGenerator.StepDetails("Pass", (count++)

			+ "- Click Dismiss >> Toast message should vanish", "",
			TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	   
	    }*/
	/*@Then("^Enter COCP number >> Toast message should be display$")
	public void enter_COCP_number_Toast_message_should_be_display() throws Throwable {
		
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("COCPNo"));
			
			System.out.println("Enter COCP number ");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Enter COCP number ", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
			Thread.sleep(2000);
			
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.tost_msg));

			boolean n=vodahome.tost_msg.isDisplayed();
			
			if(n == true) {
				
				System.out.println("Toast Message should display");
				
				HTMLReportGenerator.StepDetails("Pass", (count++)

				+ "- Toast Message should display", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
	}else {
		
		System.out.println("Toast Message should not display");
		HTMLReportGenerator.StepDetails("Fail", (count++)

				+ "- Toast Message should not display", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	 }
	}catch(TimeoutException ex) {
		
		System.out.println("Toast Message should not display");
		HTMLReportGenerator.StepDetails("Fail", (count++)
				+ "- Toast Message should not display", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		
		}
	
	}
*/
	@Then("^Enter VF Postpaid Number >> Arrow \\(>\\) button should be enabled$")
	public void enter_VF_Postpaid_Number_Arrow_button_should_be_enabled() throws Throwable {
	 
       VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("vodaPostpaidNo"));
			
			System.out.println("Enter VF Postpaid Number");
			
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.ArrowKey));

		boolean b = vodahome.ArrowKey.isEnabled();
		
		if(b == true) {
			
			System.out.println("Arrow (>) button should be enabled");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Arrow (>) button should be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
			System.out.println("Arrow (>) button should not be enabled");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "-Arrow (>) button should not be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}
	}catch(TimeoutException ex) {
		System.out.println("Arrow (>) button should not be enabled");
		
		HTMLReportGenerator.StepDetails("Fail", (count++)

				+ "-Arrow (>) button should not be enabled", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		
	
	 }
	}

	@Then("^Enter VF Postpaid Number >> Arrow \\(>\\) button should be black$")
	public void enter_VF_Postpaid_Number_Arrow_button_should_be_black() throws Throwable {
	    
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("vodaPostpaidNo"));
			
			System.out.println("Enter VF Postpaid Number");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Enter VF Postpaid Number >> Arrow (>) button should be black", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
	}

	@Then("^Click arrow \\(>\\)Billpay page should display$")
	public void click_arrow_Billpay_page_should_display() throws Throwable {
		
       VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
	
		WebDriverWait wait = new WebDriverWait(driver, 50);
		
      try {
	   
		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.ArrowKey));
		
		vodahome.ArrowKey.click();
		
		System.out.println("Click on Array button");
		
		HTMLReportGenerator.StepDetails("Pass", (count++)

				+ "- Billpay page should display", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		
		Thread.sleep(2000);
		
		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Billpay_Mobile));
		
		boolean b = vodahome.Billpay_Mobile.isDisplayed();
		
		if(b == true) {
			
			System.out.println("Billpay page should display");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Billpay page should display", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
			System.out.println("Billpay page should not display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Billpay page should not display", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}
      }catch(TimeoutException ex){
    	  System.out.println("Locator not found issue");
    	  
    	  HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
      }
	}

	@Then("^Verify Billpay page >> Mobile number should be autopopulated with number entered on Homepage$")
	public void verify_Billpay_page_Mobile_number_should_be_autopopulated_with_number_entered_on_Homepage() throws Throwable {
		
		  VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
       try {
    	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Billpay_Mobile));
			
			boolean b = vodahome.Billpay_Mobile.isDisplayed();
			
			if(b == true) {
			
			System.out.println("Verify Billpay page >> Mobile number should be autopopulated with number entered on Homepage");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Verify Billpay page >> Mobile number should be autopopulated with number entered on Homepage", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}else {
				
				System.out.println("Verify Billpay page >> Mobile number should not be autopopulated with number entered on Homepage");
				
				HTMLReportGenerator.StepDetails("Fail", (count++)

						+ "- Verify Billpay page >> Mobile number should not be autopopulated with number entered on Homepage", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
       }catch(TimeoutException ex){
    	   
    	   System.out.println("Locator not found issue");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
       }
	}

	@Then("^Verify Billpay page >> Amount field should be enabled$")
	public void verify_Billpay_page_Amount_field_should_be_enabled() throws Throwable {
		
		
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
    try {
 	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Billpay_Amount));
			
			boolean b = vodahome.Billpay_Amount.isEnabled();
			
			if(b == true) {
			
			System.out.println("Verify Billpay page >> Amount field should be enabled");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Verify Billpay page >> Amount field should be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}else {
				
				System.out.println("Verify Billpay page >> Amount field should not be enabled");
				
				HTMLReportGenerator.StepDetails("Fail", (count++)

						+ "- Verify Billpay page >> Amount field should not be enabled", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
    }catch(TimeoutException ex){
 	   
 	   System.out.println("Locator not found issue");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
      }
	}

	@Then("^Verify Billpay page >> Fetch your bill link should be enabled$")
	public void verify_Billpay_page_Fetch_your_bill_link_should_be_enabled() throws Throwable {
	   

		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
   try {
	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Billpay_fechBill));
			
			boolean b = vodahome.Billpay_fechBill.isEnabled();
			
			if(b == true) {
			
			System.out.println("Verify Billpay page >> Fetch your bill link should be enabled");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Verify Billpay page >> Fetch your bill link should be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}else {
				
				System.out.println("Verify Billpay page >> Fetch your bill link should not be enabled");
				
				HTMLReportGenerator.StepDetails("Fail", (count++)

						+ "- Verify Billpay page >> Fetch your bill link should not 10be enabled", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
   }catch(TimeoutException ex){
	   
	   System.out.println("Locator not found issue");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	 }
	}
	@Then("^Enter VF Prepaid Number >> Arrow \\(>\\) button should be enabled$")
	public void enter_VF_Prepaid_Number_Arrow_button_should_be_enabled() throws Throwable {
		
		driver.get(OR.getProperty("Vodafone_HomePage"));
		
       VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		//try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("vodafone_pre"));
			
			System.out.println("Enter VF Prepaid Number");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Enter VF Prepaid Number", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
			Thread.sleep(2000);
			
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.ArrowKey));
			
		boolean b = vodahome.ArrowKey.isEnabled();
		
		if(b == true) {
			
			System.out.println("Arrow(>) button should be enabled");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Arrow(>) button should be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
			
		}else {
			
			System.out.println("Arrow(>) button should not be enabled");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Arrow(>) button should not be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
	}

	@Then("^Enter VF Prepaid Number >> Arrow \\(>\\) button should be black$")
	public void enter_VF_Prepaid_Number_Arrow_button_should_be_black() throws Throwable {
		
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		vodahome.mobile_No.clear();

		WebDriverWait wait = new WebDriverWait(driver, 50);

		//try {
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.mobile_No));

			vodahome.mobile_No.sendKeys(OR.getProperty("VodaPrepaid_rechage"));
			
			System.out.println("Enter VF Prepaid Number");
			
			Thread.sleep(2000);
			
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.ArrowKey));
			
		boolean b = vodahome.ArrowKey.isEnabled();
		
		if(b == true) {
			
			System.out.println("Enter VF Prepaid Number >> Arrow (>) button should be black");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Enter VF Prepaid Number >> Arrow (>) button should be black", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
			
		}else {
			
			System.out.println("Enter VF Prepaid Number >> Arrow (>) button should not be black");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Enter VF Prepaid Number >> Arrow (>) button should not be black", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
	}

	@Then("^Click arrow \\(>\\)Recharge page should display$")
	public void click_arrow_Recharge_page_should_display() throws Throwable {
		
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 50);
try {
	
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.ArrowKey));
			
			vodahome.ArrowKey.click();
			
			System.out.println("Click arrow(>)Recharge page should display");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Click arrow (>)Recharge page should display", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
			Thread.sleep(2000);
			
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Billpay_Mobile));
			
			boolean b = vodahome.Billpay_Mobile.isDisplayed();
			
			if(b == true) {
				
				System.out.println("Click arrow (>)Recharge page should display");
				
				HTMLReportGenerator.StepDetails("Pass", (count++)

						+ "-Click arrow (>)Recharge page should display", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}else {
				
				System.out.println("Click arrow (>)Recharge page should not display");
				
				HTMLReportGenerator.StepDetails("Fail", (count++)

						+ "- Billpay page should not display", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}
			
}catch(TimeoutException ex){
	
	System.out.println("Locator not found issue");
	HTMLReportGenerator.StepDetails("Fail", (count++)

			+ "-Locator not found issue", "",
			TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	
   }
	}

	@Then("^Verify Recharge page >> Mobile number should be autopopulated with number entered on Homepage$")
	public void verify_Recharge_page_Mobile_number_should_be_autopopulated_with_number_entered_on_Homepage() throws Throwable {
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
    try {
 	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Billpay_Mobile));
			
			boolean b = vodahome.Billpay_Mobile.isDisplayed();
			
			if(b == true) {
			
			System.out.println("Verify Recharge page >> Mobile number should be autopopulated with number entered on Homepage");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Verify Recharge page>> Mobile number should be autopopulated with number entered on Homepage", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}else {
				
				System.out.println("Verify Recharge page >> Mobile number should not be autopopulated with number entered on Homepage");
				
				HTMLReportGenerator.StepDetails("Fail", (count++)

						+ "- Verify Recharge page >> Mobile number should not be autopopulated with number entered on Homepage", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
    }catch(TimeoutException ex){
 	   
 	   System.out.println("Locator not found issue");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
    }
	}

	@Then("^Verify Recharge page >> Amount field should be enabled$")
	public void verify_Recharge_page_Amount_field_should_be_enabled() throws Throwable {
		
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
			
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
          try {
	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.recharge_page));
			
			boolean b = vodahome.recharge_page.isEnabled();
			
			if(b == true) {
			
			System.out.println("Verify Recharge page  >> Amount field should be enabled");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "- Verify Recharge page >> Amount field should be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}else {
				
				System.out.println("Verify Recharge page >> Amount field should not be enabled");
				
				HTMLReportGenerator.StepDetails("Fail", (count++)

						+ "- Verify Recharge page >> Amount field should not be enabled", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
       }catch(TimeoutException ex){
	   
	   System.out.println("Locator not found issue");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Locator not found issue", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
   }
	}

	@Then("^Verify Recharge page >> Fetch last recharge link should be enabled$")
	public void verify_Recharge_page_Fetch_last_recharge_link_should_be_enabled() throws Throwable {
	    
		VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
		
		WebDriverWait wait = new WebDriverWait(driver, 50);
		
      try {
   
		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.recharge_fechlastRecharge));
		
		boolean b = vodahome.recharge_fechlastRecharge.isEnabled();
		
		if(b == true) {
		
		System.out.println("Verify Recharge page  >> Fetch last recharge link should be enabled");
		
		HTMLReportGenerator.StepDetails("Pass", (count++)

				+ "- Verify Recharge page >> Fetch last recharge link should be enabled", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}else {
			
			System.out.println("Verify Recharge page >> Fetch last recharge link should not be enabled");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Verify Recharge page >> Fetch last recharge link should not be enabled", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
   }catch(TimeoutException ex){
   
   System.out.println("Locator not found issue");
		
		HTMLReportGenerator.StepDetails("Fail", (count++)

				+ "- Locator not found issue", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
}
	}

	@Then("^Verify Recharge page >> Pack should display for respective number$")
	public void verify_Recharge_page_Pack_should_display_for_respective_number() throws Throwable {
		
        VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
       
		WebDriverWait wait = new WebDriverWait(driver, 50);
		
      try {
   
		wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.recharge_RecomenedPack));
		
		boolean b= vodahome.recharge_RecomenedPack.isDisplayed();
		if(b == true) {
			
			System.out.println("Verify Recharge page >> Pack should display for respective number");
			
			HTMLReportGenerator.StepDetails("Pass", (count++)

					+ "-Verify Recharge page >> Pack should display for respective number", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			
		}else {
			
		System.out.println("Verify Recharge page >> Pack should not display for respective number");
		
		HTMLReportGenerator.StepDetails("Fail", (count++)

				+ "- Verify Recharge page >> Pack should not display for respective number", "",
				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
		}
      }catch(TimeoutException ex){
    	  
    	  System.out.println("Verify Recharge page >> Pack should not display for respective number");
    	  HTMLReportGenerator.StepDetails("Fail", (count++)

  				+ "- Verify Recharge page >> Pack should display for respective number", "",
  				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
      }
	}

	@Then("^Verify Home Page >> Quicklinks should display below Mobile number field$")
	public void verify_Home_Page_Quicklinks_should_display_below_Mobile_number_field() throws Throwable {
		
		driver.get(OR.getProperty("Vodafone_HomePage"));
		
		  VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
	       
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
	      try {
	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Home_quicklink));
			
			boolean b= vodahome.Home_quicklink.isDisplayed();
			if(b == true) {
				
				System.out.println("Verify Home Page >> Quicklinks should display below Mobile number field");
				
				HTMLReportGenerator.StepDetails("Pass", (count++)

						+ "-Verify Home Page >> Quicklinks should display below Mobile number field", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}else {
				
			System.out.println("Verify Home Page >> Quicklinks should not display below Mobile number field");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Verify Home Page >> Quicklinks should not display below Mobile number field", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
	      }catch(TimeoutException ex){
	    	  
	    	  System.out.println("Locator not found issue-Q");
	    	  HTMLReportGenerator.StepDetails("Fail", (count++)

	  				+ "- Locator not found issue-Q", "",
	  				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	      }
		
	}

	@Then("^Verify Home Page >> Banners should display below Quicklinks$")
	public void verify_Home_Page_Banners_should_display_below_Quicklinks() throws Throwable {
		
		driver.get(OR.getProperty("Vodafone_HomePage"));
		
		  VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
	       
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
	      try {
	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Home_quicklink));
			
			boolean b= vodahome.Home_quicklink.isDisplayed();
			if(b == true) {
				
				System.out.println("Verify Home Page >> Banners should display below Quicklinks");
				
				HTMLReportGenerator.StepDetails("Pass", (count++)

						+ "-Verify Home Page >> Banners should display below Quicklinks", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}else {
				
			System.out.println("Verify Home Page >> Banners should not display below Quicklinks");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Verify Home Page >> Banners should not display below Quicklinks", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
	      }catch(TimeoutException ex){
	    	  
	    	  System.out.println("Locator not found issue-B");
	    	  HTMLReportGenerator.StepDetails("Fail", (count++)

	  				+ "- Locator not found issue-B", "",
	  				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	      }
	}

	@Then("^Verify Home Page >> Loaded Benefits on VodafoneIdea section should display$")
	public void verify_Home_Page_Loaded_Benefits_on_VodafoneIdea_section_should_display() throws Throwable {
		
       Thread.sleep(2000);
		
		JavascriptExecutor jse = (JavascriptExecutor) driver;

		jse.executeScript("window.scrollBy(0,500)", "");
		
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
	       
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
	      try {
	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.Loadedbenifit_voda));
			
			boolean b= vodahome.Loadedbenifit_voda.isDisplayed();
			if(b == true) {
				
				System.out.println("Verify Home Page >> Loaded Benefits on VodafoneIdea section should display");
				
				HTMLReportGenerator.StepDetails("Pass", (count++)

						+ "-Verify Home Page >> Loaded Benefits on VodafoneIdea section should display", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}else {
				
			System.out.println("Verify Home Page >> Loaded Benefits on VodafoneIdea section not should display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Verify Home Page >> Loaded Benefits on VodafoneIdea section should not display", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
	      }catch(TimeoutException ex){
	    	  
	    	  System.out.println("Locator not found issue-L");
	    	  HTMLReportGenerator.StepDetails("Fail", (count++)

	  				+ "- Locator not found issue-L", "",
	  				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	      }
	}

	@Then("^Verify Home Page >> Trending Now should display$")
	public void verify_Home_Page_Trending_Now_should_display() throws Throwable {
	    
		 VodafoneHomePageObj vodahome = new VodafoneHomePageObj(driver);
	       
			WebDriverWait wait = new WebDriverWait(driver, 50);
			
	      try {
	   
			wait.until(ExpectedConditions.visibilityOfAllElements(vodahome.exclusive_voda));
			
			boolean b= vodahome.exclusive_voda.isDisplayed();
			if(b == true) {
				
				System.out.println("Verify Home Page >> Trending Now should display");
				
				HTMLReportGenerator.StepDetails("Pass", (count++)

						+ "-Verify Home Page >> Trending Now should display", "",
						TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
				
			}else {
				
			System.out.println("Verify Home Page >> Trending Now should not display");
			
			HTMLReportGenerator.StepDetails("Fail", (count++)

					+ "- Verify Home Page >> Trending Now should not display", "",
					TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
			}
	      }catch(TimeoutException ex){
	    	  
	    	  System.out.println("Locator not found issue-S");
	    	  HTMLReportGenerator.StepDetails("Fail", (count++)

	  				+ "- Locator not found issue-S", "",
	  				TakeScreenShot.TakeScreenShot(baseclass.Get_ImageFilePath(), driver));
	      }
	}

	@Then("^Verify Home Page >> Important Things to Know should display$")
	public void verify_Home_Page_Important_Things_to_Know_should_display() throws Throwable {
	    
	}

	@Then("^On page load >> Imortant Things to Know should display collapsed$")
	public void on_page_load_Imortant_Things_to_Know_should_display_collapsed() throws Throwable {
	   
	}

	@Then("^Click Arrow for Important Things to Know >> Page should autoscroll$")
	public void click_Arrow_for_Important_Things_to_Know_Page_should_autoscroll() throws Throwable {
	  
	}

	@Then("^Verify page >> Focus should go on Imp Things to know section$")
	public void verify_page_Focus_should_go_on_Imp_Things_to_know_section() throws Throwable {
	   
	}

	@Then("^Verify page >> Imp Things to Know section should expand$")
	public void verify_page_Imp_Things_to_Know_section_should_expand() throws Throwable {
	   
	}

	@Then("^Click Arrow for Important Things to Know >> Page should collapse$")
	public void click_Arrow_for_Important_Things_to_Know_Page_should_collapse() throws Throwable {
	    
	}


}
